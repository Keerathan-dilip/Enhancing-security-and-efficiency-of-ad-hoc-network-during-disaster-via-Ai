
import { SimulationParameters } from './types';

export const SIMULATION_RESULTS: { [key: string]: SimulationParameters } = {
  'AI-Based': {
    'Packet Delivery Ratio': 0.95,
    'End-to-end Delay (ms)': 25,
    'Energy Consumption (J)': 500,
    'Network Lifetime (days)': 150,
    'Scalability Index': 0.85,
    'Computational Efficiency (ops/J)': 120,
    'Energy Efficiency': 0.90,
    'Robustness Index': 0.92,
    'Adaptability Rate': 0.88,
  },
  'Traditional': { // Averaged from DVR, LSR, ACO for comparison
    'Packet Delivery Ratio': 0.88,
    'End-to-end Delay (ms)': 35,
    'Energy Consumption (J)': 577,
    'Network Lifetime (days)': 130,
    'Scalability Index': 0.78,
    'Computational Efficiency (ops/J)': 95,
    'Energy Efficiency': 0.86,
    'Robustness Index': 0.87,
    'Adaptability Rate': 0.84,
  },
};

export const MOCK_CODE_CPP = `
#include "ns3/core-module.h"
#include "ns3/network-module.hh"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/aodv-helper.h"
#include "ns3/mobility-module.h"

using namespace ns3;

int main (int argc, char *argv[])
{
  // --- Simulation Parameters ---
  uint32_t nNodes = 50;
  double simTime = 150.0; // seconds

  // --- Boilerplate ---
  CommandLine cmd;
  cmd.Parse (argc, argv);

  // --- Network Setup ---
  NodeContainer nodes;
  nodes.Create (nNodes);

  // Install mobility
  MobilityHelper mobility;
  mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                  "MinX", DoubleValue (0.0),
                                  "MinY", DoubleValue (0.0),
                                  "DeltaX", DoubleValue (5.0),
                                  "DeltaY", DoubleValue (10.0),
                                  "GridWidth", UintegerValue (10),
                                  "LayoutType", StringValue ("RowFirst"));
  mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",
                             "Bounds", RectangleValue (Rectangle (-50, 50, -50, 50)));
  mobility.Install (nodes);

  // --- AI-Enhanced AODV Routing ---
  // This custom helper would contain the AI logic for route selection
  AodvHelper aodv;

  // --- Internet Stack ---
  InternetStackHelper stack;
  stack.SetRoutingHelper (aodv);
  stack.Install (nodes);

  // ... rest of NS-3 setup ...

  Simulator::Stop (Seconds (simTime));
  Simulator::Run ();
  Simulator::Destroy ();

  return 0;
}
`;

export const MOCK_CODE_TCL = `
# TCL script for configuring network scenarios, often used with NS-2.
# This script can define nodes, links, and traffic patterns that a C++ simulation engine would execute.
# ---
# Create a simulator object
set ns [new Simulator]

# Open the trace file
set tf [open out.tr w]
$ns trace-all $tf

# Define a 'finish' procedure
proc finish {} {
    global ns tf
    $ns flush-trace
    # Close the trace file
    close $tf
    exit 0
}

# Create two nodes
set n0 [$ns node]
set n1 [$ns node]

# Create a duplex link between the nodes
$ns duplex-link $n0 $n1 1Mb 10ms DropTail

# Setup a TCP connection
set tcp [new Agent/TCP]
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n1 $sink
$ns connect $tcp $sink

# Setup a FTP over TCP connection
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns at 0.5 "$ftp start"

# Call the finish procedure
$ns at 5.0 "finish"

# Run the simulation
$ns run
`;

export const MOCK_CODE_AWK = `
# AWK script for post-processing simulation trace files generated by a C++ simulator like NS-3.
# This script parses trace data to calculate key performance metrics.
# ---
# AWK script to calculate Packet Delivery Ratio (PDR)
BEGIN {
    sent_packets = 0;
    received_packets = 0;
    start_time = -1;
    end_time = -1;
}

# For each line in the trace file
{
    event = $1;
    time = $2;
    packet_id = $6;

    if (start_time < 0) {
      start_time = time;
    }
    end_time = time;

    if (event == "+") { # enqueued
        sent_packets++;
    }
    if (event == "r") { # received
        received_packets++;
    }
}

END {
    simulation_time = end_time - start_time;
    if (sent_packets > 0) {
        pdr = (received_packets / sent_packets) * 100;
        printf "Total Packets Sent: %d\\n", sent_packets;
        printf "Total Packets Received: %d\\n", received_packets;
        printf "Packet Delivery Ratio (PDR): %.2f %%\\n", pdr;
        printf "Simulation Time: %.2f s\\n", simulation_time;
    } else {
        printf "No packets were sent.\\n";
    }
}
`;
