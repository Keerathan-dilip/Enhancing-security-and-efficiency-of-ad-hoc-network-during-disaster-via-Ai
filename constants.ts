
import { SimulationParameters } from './types';

export const SIMULATION_RESULTS: { [key: string]: SimulationParameters } = {
  'AI-Based': {
    'Packet Delivery Ratio': 0.95,
    'End-to-end Delay (ms)': 25,
    'Energy Consumption (J)': 500,
    'Network Lifetime (days)': 150,
    'Scalability Index': 0.85,
    'Computational Efficiency (ops/J)': 120,
    'Energy Efficiency': 0.90,
    'Robustness Index': 0.92,
    'Adaptability Rate': 0.88,
    'Throughput (Mbps)': 54,
  },
  'Traditional': { // Averaged from DVR, LSR, ACO for comparison
    'Packet Delivery Ratio': 0.88,
    'End-to-end Delay (ms)': 35,
    'Energy Consumption (J)': 577,
    'Network Lifetime (days)': 130,
    'Scalability Index': 0.78,
    'Computational Efficiency (ops/J)': 95,
    'Energy Efficiency': 0.86,
    'Robustness Index': 0.87,
    'Adaptability Rate': 0.84,
    'Throughput (Mbps)': 40,
  },
};

export const MOCK_CODE_AWK = `
# AWK script for post-processing simulation trace files generated by a C++ simulator like NS-3.
# This script parses trace data to calculate key performance metrics.
# ---
# AWK script to calculate Packet Delivery Ratio (PDR)
BEGIN {
    sent_packets = 0;
    received_packets = 0;
    start_time = -1;
    end_time = -1;
}

# For each line in the trace file
{
    event = $1;
    time = $2;
    packet_id = $6;

    if (start_time < 0) {
      start_time = time;
    }
    end_time = time;

    if (event == "+") { # enqueued
        sent_packets++;
    }
    if (event == "r") { # received
        received_packets++;
    }
}

END {
    simulation_time = end_time - start_time;
    if (sent_packets > 0) {
        pdr = (received_packets / sent_packets) * 100;
        printf "Total Packets Sent: %d\\n", sent_packets;
        printf "Total Packets Received: %d\\n", received_packets;
        printf "Packet Delivery Ratio (PDR): %.2f %%\\n", pdr;
        printf "Simulation Time: %.2f s\\n", simulation_time;
    } else {
        printf "No packets were sent.\\n";
    }
}
`;